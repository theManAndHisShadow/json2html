/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/ts/lib/json2html.ts":
/*!*********************************!*\
  !*** ./src/ts/lib/json2html.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.json2html = void 0;\n/**\n * Checks given value type and returns CSS class name for it.\n * @param value\n * @returns CSS class name, for example: \"json2html-type__boolean\"\n */\nfunction getValueTypeClassName(value) {\n    var classNameSample = 'json2html-type__';\n    var type = value == null || value == \"undefined\" ? value : typeof value;\n    return classNameSample + type;\n}\n/**\n * Checks given value type and if is type \"string\" wraps value to double quotes.\n * @param value\n * @returns prepared value\n */\nfunction wrapValue(value) {\n    var isString = typeof value == 'string';\n    var isNull = value == null;\n    var wrapped = value;\n    if (isNull)\n        wrapped = \"\".concat(value);\n    if (isString)\n        wrapped = \"\\\"\".concat(value, \"\\\"\");\n    return wrapped;\n}\n/**\n * Checks if given string is a link.\n * @param target string to check\n * @returns\n */\nfunction isLink(target) {\n    return /https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_\\+.~#?&//=]*)/.test(target);\n}\n/**\n * Renders pair, where key:value - value is primitive type value.\n * @param keyName\n * @param itemValue\n * @returns ready for other manipulations HTML Node.\n */\nfunction renderPrimitiveItem(params) {\n    var element = document.createElement('div');\n    element.classList.add('json2html-pair');\n    var propertyName = document.createElement('span');\n    propertyName.textContent = params.keyName + \": \";\n    propertyName.classList.add('json2html-key');\n    var value = document.createElement('span');\n    value.textContent = wrapValue(params.itemValue);\n    // show browser tooltip at primitive key value on hover\n    if (params.showTypeOnHover === true) {\n        var tip = params.itemValue == null ? 'null' : typeof params.itemValue;\n        // special tooltip for links\n        if (params.highlightLinks === true && isLink(params.itemValue)) {\n            tip = 'string (clickable link)';\n        }\n        value.setAttribute('title', tip);\n    }\n    // insert link if highlightLinks is true and string is link\n    if (params.highlightLinks === true && isLink(params.itemValue)) {\n        var link = document.createElement('a');\n        link.setAttribute('target', '_blank');\n        link.href = params.itemValue;\n        link.textContent = \"\\\"\".concat(params.itemValue, \"\\\"\");\n        value.textContent = '';\n        value.appendChild(link);\n    }\n    value.classList.add('json2html-value');\n    value.classList.add(getValueTypeClassName(params.itemValue));\n    element.appendChild(propertyName);\n    element.appendChild(value);\n    return element;\n}\n/**\n * Emulates event by eventType on target element.\n * @param target event target\n * @param evenType event trigger type, for example \"click\"\n */\nfunction emulateEvent(target, evenType) {\n    var evObj = document.createEvent('Events');\n    evObj.initEvent(evenType, true, false);\n    target.dispatchEvent(evObj);\n}\n/**\n * Adds multiple event handlers\n * @param targets array of targets\n * @param evenType event type\n * @param callback callback function with access to event instance\n */\nfunction addMultipleEventHandlers(targets, evenType, callback) {\n    targets.forEach(function (target) {\n        target.addEventListener(evenType, function (event) {\n            callback(event);\n        });\n    });\n}\n/**\n * Checks the presence of nested elements.\n * @param targetItem parent item to check\n * @returns\n */\nfunction hasNestedItems(targetItem) {\n    var result = false;\n    Object.values(targetItem).forEach(function (targetItem) {\n        if (targetItem !== null) {\n            if (targetItem.constructor.name === \"Object\" || targetItem.constructor.name === \"Array\")\n                result = true;\n        }\n    });\n    return result;\n}\n/**\n * Updates the text content of the collapse button.\n * @param spoiler target spoiler, that affects to collapse buttons text contents\n * @param collapseButton Target collapse button. An optional argument. If empty, the function will itself look for a button\n */\nfunction updateCollapseButton(spoiler, collapseButton) {\n    var collapseButtonClassName = 'json2html-collapse-all-trigger';\n    collapseButton = collapseButton || spoiler.parentElement.querySelector(\".\".concat(collapseButtonClassName));\n    var triggerState = spoiler.className.split('--')[1];\n    var action = triggerState == \"uncollapsed\" ? \"collapse\" : \"uncollapse\";\n    if (collapseButton)\n        collapseButton.textContent = \"(\".concat(action, \" all)\");\n}\n/**\n * Renders collapse helper buttons near complex pairs.\n * @param params\n */\nfunction renderCollapseButtons(params) {\n    var collapseButtonClassName = 'json2html-collapse-all-trigger';\n    var isExist = params.renderIn.querySelector(\"\".concat(collapseButtonClassName));\n    var collapseAllNestedBtn = isExist || document.createElement('span');\n    if (!isExist)\n        collapseAllNestedBtn.className = collapseButtonClassName;\n    // initial button element update\n    updateCollapseButton(params.targetSpoiler, collapseAllNestedBtn);\n    // on click emulate clicking at spoiler buttons c:\n    collapseAllNestedBtn.addEventListener('click', function (event) {\n        // get all spoilers button on that tree branch\n        var sploilers = params.renderIn.querySelectorAll('.' + params.targetSpoiler.className);\n        sploilers.forEach(function (spoiler) {\n            emulateEvent(spoiler, 'click');\n            updateCollapseButton(spoiler);\n        });\n    });\n    // add once\n    if (!isExist)\n        params.renderIn.appendChild(collapseAllNestedBtn);\n}\n/**\n * Renders complex pair, where key:value - value is Object or Array.\n * @param keyName\n * @param itemValue\n * @returns ready for other manipulations HTML Node.\n */\nfunction renderComplexItem(params) {\n    var nestedObject = params.itemValue;\n    var renderedNested = render({\n        parsedJSON: nestedObject,\n        renderNestedLength: params.renderNestedLength,\n        highlightLinks: params.highlightLinks,\n        collapseAll: params.collapseAll,\n        showTypeOnHover: params.showTypeOnHover,\n    });\n    renderedNested.classList.add('json2html-nested-value');\n    var nestedElement = document.createElement('div');\n    nestedElement.classList.add('json2html-complex-pair');\n    var spoilerBtn = document.createElement('span');\n    spoilerBtn.textContent = 'â–¶';\n    // collapsin at start (or not)\n    if (params.collapseAll === true) {\n        spoilerBtn.classList.add('json2html-spoiler-trigger--collapsed');\n        renderedNested.setAttribute('hidden', '');\n    }\n    else {\n        spoilerBtn.classList.add('json2html-spoiler-trigger--uncollapsed');\n    }\n    var parentPropertyName = document.createElement('span');\n    parentPropertyName.textContent = params.keyName + \": \";\n    parentPropertyName.classList.add('json2html-key');\n    var typeSignature = document.createElement('span');\n    typeSignature.textContent = params.itemValue.constructor.name;\n    if (Object.values(nestedObject).length > 0) {\n        // Adding multiple event handlers, \n        // clicking on an element from the array below should invoke callback\n        addMultipleEventHandlers([\n            spoilerBtn,\n            parentPropertyName,\n            typeSignature\n        ], 'click', function (event) {\n            var collapsed = 'json2html-spoiler-trigger--collapsed';\n            var uncollapsed = 'json2html-spoiler-trigger--uncollapsed';\n            // toggle nested object\n            if (spoilerBtn.classList.contains(collapsed)) {\n                spoilerBtn.classList.remove(collapsed);\n                spoilerBtn.classList.add(uncollapsed);\n                renderedNested.removeAttribute('hidden');\n            }\n            else {\n                spoilerBtn.classList.add(collapsed);\n                spoilerBtn.classList.remove(uncollapsed);\n                renderedNested.setAttribute('hidden', '');\n            }\n            ;\n            updateCollapseButton(spoilerBtn);\n        });\n    }\n    var constructorName = params.itemValue.constructor.name;\n    constructorName = constructorName[0].toLowerCase() + constructorName.slice(1);\n    // only for Array items\n    var isArray = params.itemValue.constructor.name === \"Array\";\n    var isObject = params.itemValue.constructor.name === \"Object\";\n    if (params.renderNestedLength === true) {\n        if (isArray) {\n            var length_1 = params.itemValue.length == 0 ? 'empty' : params.itemValue.length;\n            var word = length_1 == \"empty\"\n                ? \"\" : length_1 == 1\n                ? ' item' : \" items\";\n            typeSignature.textContent += \" (\".concat(length_1).concat(word, \")\");\n        }\n        else if (isObject && Object.keys(params.itemValue).length === 0) {\n            typeSignature.textContent += \" (empty)\";\n        }\n    }\n    typeSignature.classList.add('json2html-type__' + constructorName);\n    if (Object.values(nestedObject).length > 0)\n        nestedElement.appendChild(spoilerBtn);\n    nestedElement.appendChild(parentPropertyName);\n    nestedElement.appendChild(typeSignature);\n    // if item contains nested object \n    // render special button \"collapse all\" \n    // only complex values that can be collapsed \n    // cause primitive values conatins simple structures\n    if (Object.values(nestedObject).length > 0 && hasNestedItems(nestedObject)) {\n        renderCollapseButtons({\n            targetSpoiler: spoilerBtn,\n            renderIn: nestedElement,\n            collapsed: params.collapseAll,\n            nestedObject: nestedObject,\n        });\n    }\n    if (Object.values(nestedObject).length > 0)\n        nestedElement.appendChild(renderedNested);\n    return nestedElement;\n}\n/**\n *\n * @param parsedJSON\n * @returns\n */\nfunction render(params) {\n    var keys = Object.keys(params.parsedJSON);\n    var siblings = [];\n    var rendered = document.createElement('div');\n    rendered.classList.add('json2html-container');\n    keys.forEach(function (key) {\n        var isNotNull = params.parsedJSON[key] !== null;\n        var isObject = isNotNull && params.parsedJSON[key].constructor.name === \"Object\";\n        var isArray = isNotNull && params.parsedJSON[key].constructor.name === \"Array\";\n        if (isNotNull && isObject || isArray) {\n            var nestedElement = renderComplexItem({\n                keyName: key,\n                itemValue: params.parsedJSON[key],\n                renderNestedLength: params.renderNestedLength,\n                highlightLinks: params.highlightLinks,\n                collapseAll: params.collapseAll,\n                showTypeOnHover: params.showTypeOnHover,\n            });\n            siblings.push(nestedElement);\n        }\n        else {\n            var element = renderPrimitiveItem({\n                keyName: key,\n                itemValue: params.parsedJSON[key],\n                highlightLinks: params.highlightLinks,\n                showTypeOnHover: params.showTypeOnHover,\n            });\n            siblings.push(element);\n        }\n    });\n    siblings.forEach(function (node) {\n        rendered.appendChild(node);\n    });\n    return rendered;\n}\n/**\n * Injects theme style from css/themes folder to head tag.\n * @param themeName name of theme css file\n */\nfunction injectThemeCSS(themeName) {\n    var filePath = \"css/themes/\".concat(themeName, \".css\");\n    var style = document.head.querySelector('[data-style-origin=\"json2html\"]');\n    var styleIsNotExist = !style;\n    // add new stylesheet only once\n    if (styleIsNotExist) {\n        var newStyleElement = document.createElement('link');\n        newStyleElement.setAttribute('rel', 'stylesheet');\n        newStyleElement.setAttribute('data-style-origin', 'json2html');\n        newStyleElement.setAttribute('href', filePath);\n        document.head.appendChild(newStyleElement);\n    }\n    else {\n        var isDifferentPath = style.getAttribute('href') !== filePath;\n        // change href attr only is new theme\n        if (isDifferentPath)\n            style.setAttribute('href', filePath);\n    }\n}\nfunction json2html(params) {\n    // if renderNestedLength param not given - pass true\n    params.renderNestedLength = params.renderNestedLength == false ? false : true;\n    params.highlightLinks = params.highlightLinks == false ? false : true;\n    params.collapseAll = params.collapseAll == false ? false : true;\n    params.showTypeOnHover = params.showTypeOnHover == false ? false : true;\n    params.theme = params.theme || 'default';\n    injectThemeCSS(params.theme);\n    var parsed = JSON.parse(params.json);\n    var rendered = render({\n        parsedJSON: { json: parsed },\n        renderNestedLength: params.renderNestedLength,\n        highlightLinks: params.highlightLinks,\n        collapseAll: params.collapseAll,\n        showTypeOnHover: params.showTypeOnHover,\n    });\n    console.log(params, rendered.parentElement);\n    return rendered;\n}\nexports.json2html = json2html;\n\n\n//# sourceURL=webpack:///./src/ts/lib/json2html.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/ts/lib/json2html.ts"](0, __webpack_exports__);
/******/ 	
/******/ })()
;