/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/ts/app.ts":
/*!***********************!*\
  !*** ./src/ts/app.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nvar json2html_1 = __webpack_require__(/*! ./lib/json2html */ \"./src/ts/lib/json2html.ts\");\n/**\n * Returns theme colors object.\n * @param themeName name of theme\n * @returns object of theme colors, for example {propColor: hex}\n */\nfunction getThemeColors(themeName) {\n    var themes = {\n        dracula: {\n            background: '#21232c',\n            tile: '#282a36',\n            border: '#424242',\n            foreground: '#ffffff',\n            error: '#ee5d44',\n        },\n        monokai: {\n            background: '#22231e',\n            tile: '#272822',\n            border: '#424242',\n            foreground: '#ffffff',\n            error: '#fd971f',\n        },\n        daylight: {\n            background: '#e7e7e7',\n            tile: '#ffffff',\n            border: '#b6b6b6',\n            foreground: '#000000',\n            error: '#bf0404',\n        },\n        horizon: {\n            background: '#ded5cc',\n            tile: '#ffffff',\n            border: '#b6b6b6',\n            foreground: '#2f2f2f',\n            error: '#bf0404',\n        },\n        \"github-light\": {\n            background: '#e7e7e7',\n            tile: '#ffffff',\n            border: '#cacdd1',\n            foreground: '#25292f',\n            error: '#bf0404',\n        },\n        \"github-dark\": {\n            background: '#10161d',\n            tile: '#0d1117',\n            border: '#30373d',\n            foreground: '#c9d1d9',\n            error: '#cd3c3c',\n        },\n        \"gruvbox-dark\": {\n            background: '#242424',\n            tile: '#282828',\n            border: '#3f3f3f',\n            foreground: '#A89984',\n            error: '#bf241d',\n        },\n        \"gruvbox-light\": {\n            background: '#e1d8b2',\n            tile: '#FBF1C7',\n            border: '#b7a5a0',\n            foreground: '#7C6F64',\n            error: '#bf241d',\n        },\n        andromeda: {\n            background: '#1e2127',\n            tile: '#23262e',\n            border: '#444444',\n            foreground: '#adb2bc',\n            error: '#bf241d',\n        },\n    };\n    return themes[themeName];\n}\n/**\n * Returns current seleted by user app theme name.\n * @returns theme name\n */\nfunction getSelectedThemeName() {\n    var themeSelector = document.querySelector('#controls__theme-selector');\n    return themeSelector.value;\n}\n/**\n * Updates app colors using theme name. Using 'ugly' methods\n * @param themeName\n */\nfunction changeAppTheme(themeName) {\n    var themeColors = getThemeColors(themeName);\n    var appContainer = document.querySelector('#app');\n    var appInput = document.querySelector('#app #app__input');\n    var textArea = document.querySelector('#app #app__input textarea');\n    var appControls = document.querySelector('#app__controls');\n    var themeSelector = document.querySelector('#app__controls select');\n    var outputContainer = document.querySelector('#app__output');\n    appContainer.style.background = themeColors.background;\n    textArea.style.background = themeColors.tile;\n    appInput.style.background = themeColors.tile;\n    outputContainer.style.background = themeColors.tile;\n    outputContainer.style.background = themeColors.tile;\n    themeSelector.style.background = themeColors.tile;\n    appControls.style.color = themeColors.foreground;\n    textArea.style.color = themeColors.foreground;\n    outputContainer.style.color = themeColors.foreground;\n    themeSelector.style.color = themeColors.foreground;\n    textArea.style.borderColor = themeColors.border;\n    appInput.style.borderColor = themeColors.border;\n    outputContainer.style.borderColor = themeColors.border;\n    themeSelector.style.borderColor = themeColors.border;\n}\n/**\n * Show or hide error message container.\n * @param state visibility of errror message container\n * @param message error message\n */\nfunction toggleErrorMessage(state, message) {\n    var errorMessageConainer = document.querySelector('#app__error-message');\n    var textArea = document.querySelector('#app #app__input textarea');\n    if (state === true) {\n        var errorMessage = \"[Error! \".concat(message, \"]:\");\n        var themeName = getSelectedThemeName();\n        var themeColors = getThemeColors(themeName);\n        errorMessageConainer.textContent = errorMessage;\n        errorMessageConainer.style.display = 'initial';\n        errorMessageConainer.style.color = themeColors.error;\n        textArea.style.color = themeColors.error;\n        textArea.style.top = '20px';\n    }\n    else {\n        errorMessageConainer.style.display = 'none';\n        textArea.style.top = '0px';\n    }\n}\n/**\n * Updates output container inner content.\n * @param newOutput\n */\nfunction updateOutput(newOutput) {\n    var output = document.querySelector('#app__output');\n    output.children.length == 0\n        ? output.appendChild(newOutput)\n        : output.replaceChild(newOutput, output.firstElementChild);\n}\n/**\n * Renders text as parsed and formatted JSON.\n * @param text\n */\nfunction renderText(text) {\n    var themeName = getSelectedThemeName();\n    var formatted = (0, json2html_1.json2html)({\n        json: text,\n        collapseAll: false,\n        showTypeOnHover: true,\n        theme: themeName,\n        // on error show error message\n        onError: function (error) {\n            toggleErrorMessage(true, error.message);\n        },\n    });\n    // if variable 'formatted' returned from json2html function\n    // it means that code executed wuthout error\n    if (formatted) {\n        // then hide error message\n        toggleErrorMessage(false);\n        changeAppTheme(themeName);\n        updateOutput(formatted);\n    }\n}\nfunction init() {\n    var defaultJSONString = \"{\\n    \\\"string\\\":\\\"Hello world!\\\", \\\"paragraph\\\":\\\"Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo?\\\", \\\"link\\\":\\\"https://www.freedesktop.org/wiki/\\\",\\\"number\\\":42, \\\"negativeNumber\\\": -1,\\\"floatNumber\\\":3.1415926535,\\\"boolean\\\":true, \\\"isNull\\\": null, \\\"isUndefined\\\": \\\"undefined\\\", \\\"emptyArray\\\": [], \\\"emptyObject\\\": {}, \\\"arrayOfNumbers\\\": [1, 2, 3, 4, 5], \\\"arrayOfObjects\\\": [{\\\"id\\\": 1, \\\"profileType\\\":\\\"public\\\",\\\"blocked\\\": false}, {\\\"id\\\":2, \\\"profileType\\\":\\\"private\\\", \\\"blocked\\\": true}, {\\\"id\\\": 3, \\\"profileType\\\":\\\"private\\\", \\\"blocked\\\": false}], \\\"superNested\\\": { \\\"level1\\\": {\\\"level2\\\": {\\\"level3\\\": {\\\"level4\\\":{\\\"level5\\\":{\\\"level6\\\":\\\"Btw I use Arch\\\"}}}}}}\\n}\";\n    var appInput = document.querySelector('#app #app__input');\n    var themeSelector = document.querySelector('#controls__theme-selector');\n    var textArea = document.querySelector('#app #app__input textarea');\n    textArea.textContent = defaultJSONString;\n    // render on init\n    renderText(defaultJSONString);\n    // emulate textarea focusing\n    appInput.addEventListener('click', function (event) {\n        var target = event.target;\n        // if event target is not text area\n        if (target.tagName !== 'TEXTAREA') {\n            // focus on textarea end\n            var lineEnd = textArea.value.length;\n            textArea.setSelectionRange(lineEnd, lineEnd);\n            textArea.focus();\n        }\n    });\n    // render on theme changing\n    themeSelector.addEventListener('change', function (event) {\n        renderText(textArea.value);\n    });\n    // render formatted JSON on textarea changing\n    textArea.addEventListener('keyup', function (event) {\n        renderText(textArea.value);\n    });\n}\ninit();\n\n\n//# sourceURL=webpack:///./src/ts/app.ts?");

/***/ }),

/***/ "./src/ts/lib/json2html.ts":
/*!*********************************!*\
  !*** ./src/ts/lib/json2html.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.json2html = void 0;\n/**\n * Checks given value type and returns CSS class name for it.\n * @param value\n * @returns CSS class name, for example: \"json2html-type__boolean\"\n */\nfunction getValueTypeClassName(value) {\n    var classNameSample = 'json2html-type__';\n    var type = value == null || value == \"undefined\" ? value : typeof value;\n    return classNameSample + type;\n}\n/**\n * Checks given value type and if is type \"string\" wraps value to double quotes.\n * @param value\n * @returns prepared value\n */\nfunction wrapValue(value) {\n    var isString = typeof value == 'string';\n    var isNull = value == null;\n    var wrapped = value;\n    if (isNull)\n        wrapped = \"\".concat(value);\n    if (isString)\n        wrapped = \"\\\"\".concat(value, \"\\\"\");\n    return wrapped;\n}\n/**\n * Checks if given string is a link.\n * @param target string to check\n * @returns\n */\nfunction isLink(target) {\n    return /https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_\\+.~#?&//=]*)/.test(target);\n}\n/**\n * Renders pair, where key:value - value is primitive type value.\n * @param keyName\n * @param itemValue\n * @returns ready for other manipulations HTML Node.\n */\nfunction renderPrimitiveItem(params) {\n    var element = document.createElement('div');\n    element.classList.add('json2html-pair');\n    var propertyName = document.createElement('span');\n    propertyName.textContent = params.keyName + \": \";\n    propertyName.classList.add('json2html-key');\n    var value = document.createElement('span');\n    if (typeof params.itemValue === 'number' && params.itemValue < 0) {\n        var minusSign = document.createElement('span');\n        minusSign.classList.add('json2html-value__minus-sign');\n        minusSign.textContent = '-';\n        value.appendChild(minusSign);\n        value.innerHTML += (Math.abs(params.itemValue));\n    }\n    else {\n        value.textContent = wrapValue(params.itemValue);\n    }\n    // show browser tooltip at primitive key value on hover\n    if (params.showTypeOnHover === true) {\n        var tip = params.itemValue == null ? 'null' : typeof params.itemValue;\n        // special tooltip for links\n        if (params.highlightLinks === true && isLink(params.itemValue)) {\n            tip = 'string (clickable link)';\n        }\n        value.setAttribute('title', tip);\n    }\n    // insert link if highlightLinks is true and string is link\n    if (params.highlightLinks === true && isLink(params.itemValue)) {\n        var link = document.createElement('a');\n        link.setAttribute('target', '_blank');\n        link.href = params.itemValue;\n        link.textContent = \"\\\"\".concat(params.itemValue, \"\\\"\");\n        value.textContent = '';\n        value.appendChild(link);\n    }\n    value.classList.add('json2html-value');\n    value.classList.add(getValueTypeClassName(params.itemValue));\n    element.appendChild(propertyName);\n    element.appendChild(value);\n    return element;\n}\n/**\n * Emulates event by eventType on target element.\n * @param target event target\n * @param evenType event trigger type, for example \"click\"\n */\nfunction emulateEvent(target, evenType) {\n    var evObj = document.createEvent('Events');\n    evObj.initEvent(evenType, true, false);\n    target.dispatchEvent(evObj);\n}\n/**\n * Adds multiple event handlers\n * @param targets array of targets\n * @param evenType event type\n * @param callback callback function with access to event instance\n */\nfunction addMultipleEventHandlers(targets, evenType, callback) {\n    targets.forEach(function (target) {\n        target.addEventListener(evenType, function (event) {\n            callback(event);\n        });\n    });\n}\n/**\n * Checks the presence of nested elements.\n * @param targetItem parent item to check\n * @returns\n */\nfunction hasNestedItems(targetItem) {\n    var result = false;\n    Object.values(targetItem).forEach(function (targetItem) {\n        if (targetItem !== null) {\n            if (targetItem.constructor.name === \"Object\" || targetItem.constructor.name === \"Array\")\n                result = true;\n        }\n    });\n    return result;\n}\n/**\n * Updates the text content of the collapse button.\n * @param spoiler target spoiler, that affects to collapse buttons text contents\n * @param collapseButton Target collapse button. An optional argument. If empty, the function will itself look for a button\n */\nfunction updateCollapseButton(spoiler, collapseButton) {\n    var collapseButtonClassName = 'json2html-collapse-all-trigger';\n    collapseButton = collapseButton || spoiler.parentElement.querySelector(\".\".concat(collapseButtonClassName));\n    var triggerState = spoiler.className.split('--')[1];\n    var action = triggerState == \"uncollapsed\" ? \"collapse\" : \"uncollapse\";\n    if (collapseButton)\n        collapseButton.textContent = \"(\".concat(action, \" all)\");\n}\n/**\n * Renders collapse helper buttons near complex pairs.\n * @param params\n */\nfunction renderCollapseButtons(params) {\n    var collapseButtonClassName = 'json2html-collapse-all-trigger';\n    var isExist = params.renderIn.querySelector(\"\".concat(collapseButtonClassName));\n    var collapseAllNestedBtn = isExist || document.createElement('span');\n    if (!isExist)\n        collapseAllNestedBtn.className = collapseButtonClassName;\n    // initial button element update\n    updateCollapseButton(params.targetSpoiler, collapseAllNestedBtn);\n    // on click emulate clicking at spoiler buttons c:\n    collapseAllNestedBtn.addEventListener('click', function (event) {\n        // get all spoilers button on that tree branch\n        var sploilers = params.renderIn.querySelectorAll('.' + params.targetSpoiler.className);\n        sploilers.forEach(function (spoiler) {\n            emulateEvent(spoiler, 'click');\n            updateCollapseButton(spoiler);\n        });\n    });\n    // add once\n    if (!isExist)\n        params.renderIn.appendChild(collapseAllNestedBtn);\n}\n/**\n * Renders complex pair, where key:value - value is Object or Array.\n * @param keyName\n * @param itemValue\n * @returns ready for other manipulations HTML Node.\n */\nfunction renderComplexItem(params) {\n    var nestedObject = params.itemValue;\n    var renderedNested = render({\n        parsedJSON: nestedObject,\n        renderNestedLength: params.renderNestedLength,\n        highlightLinks: params.highlightLinks,\n        collapseAll: params.collapseAll,\n        showTypeOnHover: params.showTypeOnHover,\n    });\n    renderedNested.classList.add('json2html-nested-value');\n    var nestedElement = document.createElement('div');\n    nestedElement.classList.add('json2html-complex-pair');\n    var spoilerBtn = document.createElement('span');\n    spoilerBtn.textContent = '▶';\n    // collapsin at start (or not)\n    if (params.collapseAll === true) {\n        spoilerBtn.classList.add('json2html-spoiler-trigger--collapsed');\n        renderedNested.setAttribute('hidden', '');\n    }\n    else {\n        spoilerBtn.classList.add('json2html-spoiler-trigger--uncollapsed');\n    }\n    var parentPropertyName = document.createElement('span');\n    parentPropertyName.textContent = params.keyName + \": \";\n    parentPropertyName.classList.add('json2html-key');\n    var typeSignature = document.createElement('span');\n    typeSignature.textContent = params.itemValue.constructor.name;\n    if (Object.values(nestedObject).length > 0) {\n        // Adding multiple event handlers, \n        // clicking on an element from the array below should invoke callback\n        addMultipleEventHandlers([\n            spoilerBtn,\n            parentPropertyName,\n            typeSignature\n        ], 'click', function (event) {\n            var collapsed = 'json2html-spoiler-trigger--collapsed';\n            var uncollapsed = 'json2html-spoiler-trigger--uncollapsed';\n            // toggle nested object\n            if (spoilerBtn.classList.contains(collapsed)) {\n                spoilerBtn.classList.remove(collapsed);\n                spoilerBtn.classList.add(uncollapsed);\n                renderedNested.removeAttribute('hidden');\n            }\n            else {\n                spoilerBtn.classList.add(collapsed);\n                spoilerBtn.classList.remove(uncollapsed);\n                renderedNested.setAttribute('hidden', '');\n            }\n            ;\n            updateCollapseButton(spoilerBtn);\n        });\n    }\n    var constructorName = params.itemValue.constructor.name;\n    constructorName = constructorName[0].toLowerCase() + constructorName.slice(1);\n    // only for Array items\n    var isArray = params.itemValue.constructor.name === \"Array\";\n    var isObject = params.itemValue.constructor.name === \"Object\";\n    if (params.renderNestedLength === true) {\n        if (isArray) {\n            var length_1 = params.itemValue.length == 0 ? 'empty' : params.itemValue.length;\n            var word = length_1 == \"empty\"\n                ? \"\" : length_1 == 1\n                ? ' item' : \" items\";\n            typeSignature.textContent += \" (\".concat(length_1).concat(word, \")\");\n        }\n        else if (isObject && Object.keys(params.itemValue).length === 0) {\n            typeSignature.textContent += \" (empty)\";\n        }\n    }\n    typeSignature.classList.add('json2html-type__' + constructorName);\n    if (Object.values(nestedObject).length > 0)\n        nestedElement.appendChild(spoilerBtn);\n    nestedElement.appendChild(parentPropertyName);\n    nestedElement.appendChild(typeSignature);\n    // if item contains nested object \n    // render special button \"collapse all\" \n    // only complex values that can be collapsed \n    // cause primitive values conatins simple structures\n    if (Object.values(nestedObject).length > 0 && hasNestedItems(nestedObject)) {\n        renderCollapseButtons({\n            targetSpoiler: spoilerBtn,\n            renderIn: nestedElement,\n            collapsed: params.collapseAll,\n            nestedObject: nestedObject,\n        });\n    }\n    if (Object.values(nestedObject).length > 0)\n        nestedElement.appendChild(renderedNested);\n    return nestedElement;\n}\n/**\n *\n * @param parsedJSON\n * @returns\n */\nfunction render(params) {\n    var keys = Object.keys(params.parsedJSON);\n    var siblings = [];\n    var rendered = document.createElement('div');\n    rendered.classList.add('json2html-container');\n    keys.forEach(function (key) {\n        var isNotNull = params.parsedJSON[key] !== null;\n        var isObject = isNotNull && params.parsedJSON[key].constructor.name === \"Object\";\n        var isArray = isNotNull && params.parsedJSON[key].constructor.name === \"Array\";\n        if (isNotNull && isObject || isArray) {\n            var nestedElement = renderComplexItem({\n                keyName: key,\n                itemValue: params.parsedJSON[key],\n                renderNestedLength: params.renderNestedLength,\n                highlightLinks: params.highlightLinks,\n                collapseAll: params.collapseAll,\n                showTypeOnHover: params.showTypeOnHover,\n            });\n            siblings.push(nestedElement);\n        }\n        else {\n            var element = renderPrimitiveItem({\n                keyName: key,\n                itemValue: params.parsedJSON[key],\n                highlightLinks: params.highlightLinks,\n                showTypeOnHover: params.showTypeOnHover,\n            });\n            siblings.push(element);\n        }\n    });\n    siblings.forEach(function (node) {\n        rendered.appendChild(node);\n    });\n    return rendered;\n}\n/**\n * Injects theme style from css/themes folder to head tag.\n * @param themeName name of theme css file\n */\nfunction injectThemeCSS(themeName) {\n    var filePath = \"css/themes/\".concat(themeName, \".css\");\n    var style = document.head.querySelector('[data-style-origin=\"json2html\"]');\n    var styleIsNotExist = !style;\n    // add new stylesheet only once\n    if (styleIsNotExist) {\n        var newStyleElement = document.createElement('link');\n        newStyleElement.setAttribute('rel', 'stylesheet');\n        newStyleElement.setAttribute('data-style-origin', 'json2html');\n        newStyleElement.setAttribute('href', filePath);\n        document.head.appendChild(newStyleElement);\n    }\n    else {\n        var isDifferentPath = style.getAttribute('href') !== filePath;\n        // change href attr only is new theme\n        if (isDifferentPath)\n            style.setAttribute('href', filePath);\n    }\n}\nfunction json2html(params) {\n    // if renderNestedLength param not given - pass true\n    params.renderNestedLength = params.renderNestedLength == false ? false : true;\n    params.highlightLinks = params.highlightLinks == false ? false : true;\n    params.collapseAll = params.collapseAll == false ? false : true;\n    params.showTypeOnHover = params.showTypeOnHover == false ? false : true;\n    params.theme = params.theme || 'default';\n    injectThemeCSS(params.theme);\n    // Wrapping JSON.parse call in trycatch\n    try {\n        var parsed = JSON.parse(params.json);\n        var rendered = render({\n            parsedJSON: { json: parsed },\n            renderNestedLength: params.renderNestedLength,\n            highlightLinks: params.highlightLinks,\n            collapseAll: params.collapseAll,\n            showTypeOnHover: params.showTypeOnHover,\n        });\n        return rendered;\n    }\n    catch (error) {\n        // Invoking params.onError for error handling \n        params.onError(error);\n    }\n}\nexports.json2html = json2html;\n\n\n//# sourceURL=webpack:///./src/ts/lib/json2html.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/ts/app.ts");
/******/ 	
/******/ })()
;